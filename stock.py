# -*- coding: utf-8 -*-
"""stock.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nV-mT2DYHpZ2fk7cIgoLklIncuMJ0S--
"""

# descrtiption: this program uses artificial recurrent neural network called long term short memory(lstm)
# to predict closing price of stock market. using AI

import math
import pandas_datareader as web 
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt 
plt.style.use('fivethirtyeight')

df = web.DataReader('INDIGO.NS',data_source='yahoo',start='2001-01-01', end='2021-04-10')
df

df.shape

#graph
plt.figure(figsize=(16,8))
plt.title('closing price history')
plt.plot(df['Close'])
plt.xlabel('Date',fontsize=18)
plt.ylabel('Close Price rupee',fontsize=18)
plt.show()

#filter data 
data= df.filter(['Close'])
#dataframe to a numphy array
dataset = data.values
#Get the number of rows to train the model on 
traning_data_len = math.ceil(len(dataset)*.8)

traning_data_len

#scale the data 
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)

scaled_data

#create the trainig data set 
#create the scaled traning data set
train_data = scaled_data[0:traning_data_len, :]

#split the data into x_train and y_train data sets
x_train=[]
y_train=[]

for i in range (60, len(train_data)):
 x_train.append(train_data[i-60:i, 0])
 y_train.append(train_data[i, 0])
 if i<=61:
  print(x_train)
  print(y_train)
  print()

#convert the x_train and y_train to numpy to arrays
x_train, y_train = np.array(x_train), np.array(y_train)

#reshape the data
x_train = np.reshape(x_train, (x_train.shape[0],x_train.shape[1],1))
x_train.shape

#build the lstm model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape= (x_train.shape[1], 1)))
model.add(LSTM(50, return_sequences= False))
model.add(Dense(25))
model.add(Dense(1))

#compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

#train the model
model.fit(x_train, y_train, batch_size=1, epochs=1 )

#Create a testing dataset 
#create a new array contaning scaled values from index 1543 to 2003
test_data = scaled_data[traning_data_len - 60:, :]
#create the data set 
x_test =[]
y_test = dataset[traning_data_len:, :]
for i in range(60, len(test_data)):
   x_test.append(test_data[i-60:i, 0])

#convert to numpy array 
x_test = np.array(x_test)

#reshape the data 
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))
x_test.shape

#get the models predicted price values
predictions = model.predict(x_test)
predections = scaler.inverse_transform(predictions)

#get the root mean squared error (RMSE)
rmse = np.sqrt(np.mean(np.power((np.array(y_test)-np.array(predictions)),2)))
rmse

#Plot the data 
train = data[:traning_data_len]
valid = data[traning_data_len:]
valid['Predictions']= predictions
#visualize the data
plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('Date',fontsize=18)
plt.ylabel('close price rupee',fontsize=18)
plt.plot(train['Close'])
plt.plot(valid[['Close','Predictions']])
plt.legend(['Train','Val','Predictions'],loc='lower right')
plt.show()

#show the valid and predicted prices
valid

#get the quote
stock_quote = web.DataReader('INDIGO.NS', data_source='yahoo' , start='2001-01-01', end='2021-04-11')
#create a new data frame
new_df = stock_quote.filter(['Close'])
#get the last 60 days closing price values and convert the dataframe to an array 
last_60_days = new_df[-60:].values
#scale the data to be values between 0 and 1
last_60_days_scaled = scaler.transform(last_60_days)
#create an empty list 
X_test = []
#append the past 60 days
X_test.append(last_60_days_scaled)
#convert the X_test data set to a numpy array
X_test = np.array(X_test)
#Reshape the data
X_test = np.reshape(X_test, (X_test.shape[0],X_test.shape[1],1))
#get predicted scaled price
pred_price = model.predict(X_test)

pred_price = scaler.inverse_transform(pred_price)
print(pred_price)

#get the quote
stock_quote2 = web.DataReader('INDIGO.NS', data_source='yahoo' , start='2021-04-10', end='2021-04-11')
print(stock_quote2['Close'])